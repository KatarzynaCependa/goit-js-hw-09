{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEwBC,SAASC,cAAc,qBACxBD,SAASC,cAAc,oBAC1BD,SAASC,cAAc,sBAF3C,MAGMC,EAAQF,SAASC,cAAc,uBAE/BE,EAAgB,CAACC,EAAUC,IACxB,IAAIC,SAAQ,CAACC,EAASC,KACLC,KAAKC,SAAW,GAEpCH,EAAQ,uBAAqBH,QAAiBC,OAE5CG,EAAK,sBAAoBJ,QAAiBC,MAAU,IAK5DF,IACGQ,MAAK,EAACP,SAAEA,EAAQC,MAAEA,MACjBO,EAAAd,GAASe,OAAOC,QAAQ,uBAAqBV,QAAiBC,MAAU,IAEzEU,OAAM,EAACX,SAAEA,EAAQC,MAAEA,MAClBO,EAAAd,GAASe,OAAOG,QAAQ,sBAAoBZ,QAAeC,MAAU,IAGzEH,EAAMe,iBAAiB,QAASd","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst firstDelayInput = document.querySelector('input[name=delay]');\nconst delayStepInput = document.querySelector('input[name=step]');\nconst amountInput = document.querySelector('input[name=amount]');\nconst btnEl = document.querySelector('button[type=submit]');\n\nconst createPromise = (position, delay) => {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    } else {\n      reject(`❌ Rejected promise ${position} in ${delay}ms`);\n    }\n  });\n};\n\ncreatePromise()\n  .then(({ position, delay }) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n\nbtnEl.addEventListener('click', createPromise());\n"],"names":["$19McP","parcelRequire","document","querySelector","$75aa520dfb7f3d3e$var$btnEl","$75aa520dfb7f3d3e$var$createPromise","position","delay","Promise","resolve","reject","Math","random","then","$parcel$interopDefault","Notify","success","catch","failure","addEventListener"],"version":3,"file":"03-promises.61c4bb62.js.map"}